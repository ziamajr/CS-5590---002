--------------------------------- HTML ----------------------------------------------------

<!–– David Ziama
     Class ID 3
     July 7, 2017
     Tetris Game
     Goal of the game
     1. When same color blocks are in single row, that row should collapse
     2. Include sound track while playing the game
––>

<!DOCTYPE html>
<html lang="en">
<html>
<head>
  <title>Tetris Game</title>
  <link rel="stylesheet" type="text/css" href="css/style.css">
  <meta name="author" content="David Ziama">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0,maximum-scale=1.0,user-scalable=no">
</head>
    
<body background = "images/bckgrd.jpg">
    
<embed src="sounds/tetris-gameboy-02.mp3" autostart="true" loop="true" hidden ="true"></embed>    
    
    <p><h2>Welcome to TETRIS!!!!!!!</h2></p>
    <div id="points"></div>
    <!–– defining my canvas  ––>
    <canvas id="game" width="240" height="400" />
    <!–– referencing my game code in script tag ––>
    <script src="js/code.js"></script>
</body>
</html>    
    
-------------------------------- CSS --------------------------------------

canvas {
        border: 5px solid yellow;
        height: 90vh;
}
   
   
-------------------------------- Javascript --------------------------------------

// accessing my canvas
const canvas = document.getElementById('game');
const context = canvas.getContext('2d');

context.scale(20, 20);

function arenaSweep() {
    let rowCount = 1;
    outer: for (let y = arena.length -1; y > 0; --y) {
        for (let x = 0; x < arena[y].length; ++x) {
            if (arena[y][x] === 0) {
                continue outer;
            }
        }

        const row = arena.splice(y, 1)[0].fill(0);
        arena.unshift(row);
        ++y;
//keeping the player points tally and giving 10 points for each row player gets
        player.points += rowCount * 10;
        rowCount *= 1;
    }
}

function collide(arena, player) {
    const m = player.matrix;
    const o = player.pos;
    for (let y = 0; y < m.length; ++y) {
        for (let x = 0; x < m[y].length; ++x) {
            if (m[y][x] !== 0 &&
               (arena[y + o.y] &&
                arena[y + o.y][x + o.x]) !== 0) {
                return true;
            }
        }
    }
    return false;
}

function createMatrix(w, h) {
    const matrix = [];
    while (h--) {
        matrix.push(new Array(w).fill(0));
    }
    return matrix;
}
//creating my pieces
function createPiece(type)
{
    if (type === 'J') { //J
        return [
            [0, 1, 0],
            [0, 1, 0],
            [1, 1, 0],
        ];
    } else if (type === 'T') { //T
        return [
            [0, 2, 0],
            [2, 2, 2],
            [0, 0, 0],
        ];
    }  else if (type === 'S') { //S
        return [
            [0, 3, 3],
            [3, 3, 0],
            [0, 0, 0],
        ];
    } else if (type === 'L') { //L
        return [
            [0, 4, 0],
            [0, 4, 0],
            [0, 4, 4],
        ]; 
    } else if (type === 'O') { //O
        return [
            [5, 5],
            [5, 5],
        ];
    } else if (type === 'Z') { //Z
        return [
            [6, 6, 0],
            [0, 6, 6],
            [0, 0, 0],
        ];
    } else if (type === 'I') {//I
        return [
            [0, 7, 0, 0],
            [0, 7, 0, 0],
            [0, 7, 0, 0],
            [0, 7, 0, 0],
        ];
    }
}

function drawMatrix(matrix, offset) {
    matrix.forEach((row, y) => {
        row.forEach((value, x) => {
            if (value !== 0) {
                context.fillStyle = colors[value];
                context.fillRect(x + offset.x,
                                 y + offset.y,
                                 1, 1);
            }
        });
    });
}
//drawing my canvas for the game to be played in
function draw() {
    context.fillStyle = '#585858';
    context.fillRect(0, 0, canvas.width, canvas.height);

    drawMatrix(arena, {x: 0, y: 0});
    drawMatrix(player.matrix, player.pos);
}

function merge(arena, player) {
    player.matrix.forEach((row, y) => {
        row.forEach((value, x) => {
            if (value !== 0) {
                arena[y + player.pos.y][x + player.pos.x] = value;
            }
        });
    });
}
//rotating bllocks
function rotate(matrix, dir) {
    for (let y = 0; y < matrix.length; ++y) {
        for (let x = 0; x < y; ++x) {
            [
                matrix[x][y],
                matrix[y][x],
            ] = [
                matrix[y][x],
                matrix[x][y],
            ];
        }
    }

    if (dir > 0) {
        matrix.forEach(row => row.reverse());
    } else {
        matrix.reverse();
    }
}

function playerDrop() {
    player.pos.y++;
    if (collide(arena, player)) {
        player.pos.y--;
        merge(arena, player);
        rst();
        arenaSweep();
        updatePoints();
    }
    dropCounter = 0;
}

function playerMove(offset) {
    player.pos.x += offset;
    if (collide(arena, player)) {
        player.pos.x -= offset;
    }
}
//resetting 
function rst() {
    const pieces = 'TJLOSZI';
    player.matrix = createPiece(pieces[pieces.length * Math.random() | 0]);
    player.pos.y = 0;
    player.pos.x = (arena[0].length / 2 | 0) -
                   (player.matrix[0].length / 2 | 0);
    if (collide(arena, player)) {
        arena.forEach(row => row.fill(0));
        player.points = 0;
        updatePoints();
    }
}

function playerRotate(dir) {
    const pos = player.pos.x;
    let offset = 1;
    rotate(player.matrix, dir);
    while (collide(arena, player)) {
        player.pos.x += offset;
        offset = -(offset + (offset > 0 ? 1 : -1));
        if (offset > player.matrix[0].length) {
            rotate(player.matrix, -dir);
            player.pos.x = pos;
            return;
        }
    }
}

let dropCounter = 0;
let dropInterval = 1000;

let lastTime = 0;
function update(time = 0) {
    const deltaTime = time - lastTime;

    dropCounter += deltaTime;
    if (dropCounter > dropInterval) {
        playerDrop();
    }

    lastTime = time;

    draw();
    requestAnimationFrame(update);
}
//updating points
function updatePoints() {
    document.getElementById('points').innerText = player.points;
}

document.addEventListener('keydown', event => {
    if (event.keyCode === 37) {
        playerMove(-1);
    } else if (event.keyCode === 39) {
        playerMove(1);
    } else if (event.keyCode === 40) {
        playerDrop();
    } else if (event.keyCode === 81) {
        playerRotate(-1);
    } else if (event.keyCode === 87) {
        playerRotate(1);
    }
});
//colors of blocks
const colors = [
    null,
    '#ccffff',
    '#ffff00',
    '#ff0000',
    '#ff99cc',
    '#6666ff',
    '#66ff33',
    '#cc3300',
];

const arena = createMatrix(12, 20);

const player = {
    pos: {x: 0, y: 0},
    matrix: null,
    points: 0,
};

rst();
updatePoints();
update();